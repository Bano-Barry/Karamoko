from django.contrib.auth.views import LoginView, LogoutView
from django.contrib import messages
from django.shortcuts import get_object_or_404, render, redirect
from django.contrib.auth import login
from django.contrib.auth.decorators import login_required

from repetiteurs.forms import RepetiteurProfileForm
from repetiteurs.models import Repetiteur
from souscripteurs.forms import SouscripteurProfileForm
from souscripteurs.models import Souscripteur
from .forms import CustomUserCreationForm, CustomLoginForm

# Vue personnalis√©e pour la connexion qui utilise un formulaire personnalis√© et redirige les utilisateurs authentifi√©s
class CustomLoginView(LoginView):
    template_name = 'authentication/login.html'  # Mod√®le pour la page de connexion
    authentication_form = CustomLoginForm       # Formulaire personnalis√© pour l'authentification
    redirect_authenticated_user = True          # Redirige les utilisateurs d√©j√† authentifi√©s

    def form_valid(self, form):
        messages.success(self.request, 'Connexion r√©ussie. Bienvenue !')  # Message de succ√®s
        return super().form_valid(form)

    def form_invalid(self, form):
        messages.error(self.request, 'Erreur lors de la connexion. Veuillez v√©rifier vos informations.')  # Message d'erreur
        return super().form_invalid(form)

# Vue personnalis√©e pour la d√©connexion qui redirige vers la page de connexion apr√®s la d√©connexion
class CustomLogoutView(LogoutView):
    next_page = 'home'  # Page vers laquelle rediriger apr√®s la d√©connexion

# Vue pour l'enregistrement des utilisateurs
def register(request):
    if request.method == 'POST':  # Si le formulaire est soumis
        form = CustomUserCreationForm(request.POST)  # Associe le formulaire avec les donn√©es POST
        if form.is_valid():  # V√©rifie si le formulaire est valide
            user = form.save()  # Enregistre le nouvel utilisateur
            messages.success(request, 'Votre compte a √©t√© cr√©√© avec succ√®s !')  # Message de succ√®s
            # R√©cup√®re la valeur de cgu_acceptees du formulaire
            cgu_acceptees = form.cleaned_data.get('cgu_acceptees', False)
            # V√©rifie le r√¥le choisi et cr√©e l'enregistrement correspondant
            if user.role == 'repetiteur':
                Repetiteur.objects.create(user=user, cgu_acceptees=cgu_acceptees)  # Cr√©e un r√©p√©titeur li√© √† l'utilisateur
            elif user.role == 'parent':
                Souscripteur.objects.create(user=user)  # Cr√©e un souscripteur li√© √† l'utilisateur
            else:  # Si le r√¥le n'est pas reconnu, on ne fait rien
                pass
            return redirect('login')  # Redirige vers la page de connexion apr√®s l'enregistrement
        else : 
            messages.error(request, 'Erreur lors de la cr√©ation de votre compte. Veuillez v√©rifier vos informations.')
    else:
        form = CustomUserCreationForm()  # Cr√©e un formulaire vide pour les requ√™tes GET
    return render(request, 'authentication/register.html', {'form': form})  # Affiche la page d'enregistrement avec le formulaire


# @login_required
# def complete_repetiteur_profile(request):
#     repetiteur = get_object_or_404(Repetiteur, user=request.user)
#     if request.method == 'POST':
#         form = RepetiteurProfileForm(request.POST, request.FILES, instance=repetiteur, user_instance=request.user)  # R√©cup√®re le formulaire avec les donn√©es de l'utilisateur
#         if form.is_valid():
#             form.save()
#             messages.success(request, 'Votre profil a √©t√© mis √† jour avec succ√®s !')  # Message de succ√®s
#             return redirect('complete_repetiteur_profile')  # Redirige vers la page de mise √† jour du profil apr√®s la soumission
#     else:
#         form = RepetiteurProfileForm(instance=repetiteur, user_instance=request.user)  # R√©cup√®re le formulaire avec les donn√©es de l'utilisateur
#     return render(request, 'repetiteurs/complete_profile.html', {'form': form, 'repetiteur': repetiteur})  # Affiche le formulaire de mise √† jour du profil

@login_required
def complete_repetiteur_profile(request):
    repetiteur = get_object_or_404(Repetiteur, user=request.user)
    
    if request.method == 'POST':
        # La vue g√®re maintenant la r√©cup√©ration et la liaison des instances
        form = RepetiteurProfileForm(
            request.POST, 
            request.FILES,
            instance=repetiteur
        )
        
        if form.is_valid():
            submit_final = 'submit_final' in request.POST
            
            # Mise √† jour des donn√©es utilisateur directement dans la vue
            user = request.user
            user.first_name = form.cleaned_data.get('first_name', user.first_name)
            user.last_name = form.cleaned_data.get('last_name', user.last_name)
            user.email = form.cleaned_data.get('email', user.email)
            user.phone = form.cleaned_data.get('phone', user.phone)
            user.save()
            
            # Sauvegarde du repetiteur
            repetiteur_instance = form.save(commit=False)
            if submit_final:
                repetiteur_instance.is_soumis = True
            repetiteur_instance.save()
            
            # Sauvegarde des relations Many-to-Many
            form.save_m2m()
            
            # Messages de feedback
            if submit_final:
                if repetiteur.is_profile_complete():
                    messages.success(request, '‚úÖ Votre profil a √©t√© soumis pour validation.')
                else:
                    messages.warning(request, '‚ö†Ô∏è Votre profil est incomplet, la soumission est bloqu√©e.')
            else:
                messages.success(request, 'üíæ Vos informations ont √©t√© mises √† jour avec succ√®s !')
            
            return redirect('complete_repetiteur_profile')
    else:
        # Initialisation du formulaire avec les donn√©es existantes
        initial_data = {
            'first_name': request.user.first_name,
            'last_name': request.user.last_name,
            'email': request.user.email,
            'phone': getattr(request.user, 'phone', ''),
        }
        form = RepetiteurProfileForm(
            instance=repetiteur,
            initial=initial_data
        )
    
    return render(request, 'repetiteurs/complete_profile.html', {
        'form': form,
        'repetiteur': repetiteur
    })

@login_required
def complete_souscripteur_profile(request):
    souscripteur = get_object_or_404(Souscripteur, user=request.user)
    if request.method == 'POST':
        form = SouscripteurProfileForm(request.POST, request.FILES, instance=souscripteur, user_instance=request.user)  # R√©cup√®re le formulaire avec les donn√©es de l'utilisateur  
        if form.is_valid():
            form.save()
            messages.success(request, 'Votre profil a √©t√© mis √† jour avec succ√®s !')
            return redirect('complete_souscripteur_profile')  # Redirige vers la page de mise √† jour du profil apr√®s la soumission
    else:
        form = SouscripteurProfileForm(instance=souscripteur, user_instance=request.user)  # R√©cup√®re le formulaire avec les donn√©es de l'utilisateur
    return render(request, 'souscripteurs/complete_profile.html', {'form': form})