# management/commands/create_test_data.py

from django.core.management.base import BaseCommand
from paiements.models import OffreTarifaire
from repetiteurs.models import Niveau, Cours

def create_test_data():
    """Cr√©e des donn√©es de test pour le syst√®me de souscription"""
    
    print("Cr√©ation des donn√©es de test...")
    
    # 1. CR√âER LES NIVEAUX
    niveaux_data = [
        {'nom': '1√®re ann√©e', 'ordre': 1},
        {'nom': '2√®me ann√©e', 'ordre': 2},
        {'nom': '3√®me ann√©e', 'ordre': 3},
        {'nom': '4√®me ann√©e', 'ordre': 4},
        {'nom': '5√®me ann√©e', 'ordre': 5},
        {'nom': '6√®me ann√©e', 'ordre': 6},
        {'nom': '7√®me ann√©e', 'ordre': 7},
        {'nom': '8√®me ann√©e', 'ordre': 8},
        {'nom': '9√®me ann√©e', 'ordre': 9},
        {'nom': '10√®me ann√©e', 'ordre': 10},
        {'nom': '11√®me ann√©e', 'ordre': 11},
        {'nom': '12√®me ann√©e', 'ordre': 12},
    ]
    
    niveaux = {}
    for niveau_data in niveaux_data:
        niveau, created = Niveau.objects.get_or_create(
            nom=niveau_data['nom'],
            defaults={'ordre': niveau_data['ordre']}
        )
        niveaux[niveau_data['nom']] = niveau
        if created:
            print(f"‚úÖ Niveau cr√©√©: {niveau.nom}")
    
    # 2. CR√âER LES COURS/MATI√àRES - NOUVELLE APPROCHE
    # D'abord cr√©er tous les cours uniques
    tous_les_cours = [
        # primaire 
        'Dict√©e', 
        'R√©daction',
        'Calcul Ecrit', 
        'SVT',
        'Histoire', 
        'G√©ographie',
        'Education Civique et Morale',
        # coll√®ge
        'Math√©matiques', 
        'Physique',
        'Chimie',
        'Fran√ßais',
        'Anglais',
        'Biologie',
        'Histoire',
        'G√©ographie',
        # lyc√©e
        'Economie',
        'Philosophie'
    ]
    
    cours_objects = {}
    for titre_cours in tous_les_cours:
        cours, created = Cours.objects.get_or_create(
            titre=titre_cours,
            defaults={'description': f'Cours de {titre_cours}'}
        )
        cours_objects[titre_cours] = cours
        if created:
            print(f"‚úÖ Cours cr√©√©: {cours.titre}")
    
    # 3. ASSOCIER LES COURS AUX NIVEAUX
    # Maintenant on associe chaque cours aux bons niveaux
    cours_niveaux_mapping = [
        # PRIMAIRE
        ('Dict√©e', ['1√®re ann√©e', '2√®me ann√©e', '3√®me ann√©e', '4√®me ann√©e', '5√®me ann√©e', '6√®me ann√©e']),
        ('R√©daction', ['1√®re ann√©e', '2√®me ann√©e', '3√®me ann√©e', '4√®me ann√©e', '5√®me ann√©e', '6√®me ann√©e']),
        ('Calcul Ecrit', ['1√®re ann√©e', '2√®me ann√©e', '3√®me ann√©e', '4√®me ann√©e', '5√®me ann√©e', '6√®me ann√©e']),
        ('SVT', ['1√®re ann√©e', '2√®me ann√©e', '3√®me ann√©e', '4√®me ann√©e', '5√®me ann√©e', '6√®me ann√©e']),
        ('Histoire', ['1√®re ann√©e', '2√®me ann√©e', '3√®me ann√©e', '4√®me ann√©e', '5√®me ann√©e', '6√®me ann√©e']),
        ('G√©ographie', ['1√®re ann√©e', '2√®me ann√©e', '3√®me ann√©e', '4√®me ann√©e', '5√®me ann√©e', '6√®me ann√©e']),
        ('Education Civique et Morale', ['1√®re ann√©e', '2√®me ann√©e', '3√®me ann√©e', '4√®me ann√©e', '5√®me ann√©e', '6√®me ann√©e']),
        # COLL√àGE
        ('Fran√ßais', ['7√®me ann√©e', '8√®me ann√©e', '9√®me ann√©e', '10√®me ann√©e']),
        ('Anglais', ['6√®me ann√©e', '7√®me ann√©e', '8√®me ann√©e', '9√®me ann√©e', '10√®me ann√©e']),
        ('Math√©matiques', ['7√®me ann√©e', '8√®me ann√©e', '9√®me ann√©e', '10√®me ann√©e']),
        ('Physique', ['7√®me ann√©e', '8√®me ann√©e', '9√®me ann√©e', '10√®me ann√©e']),
        ('Chimie', ['7√®me ann√©e', '8√®me ann√©e', '9√®me ann√©e', '10√®me ann√©e']),
        ('Biologie', ['7√®me ann√©e', '8√®me ann√©e', '9√®me ann√©e', '10√®me ann√©e']),
        ('Histoire', ['7√®me ann√©e', '8√®me ann√©e', '9√®me ann√©e', '10√®me ann√©e']),
        ('G√©ographie', ['7√®me ann√©e', '8√®me ann√©e', '9√®me ann√©e', '10√®me ann√©e']),
        # LYC√âE
        ('Math√©matiques', ['11√®me ann√©e', '12√®me ann√©e']),
        ('Physique', ['11√®me ann√©e', '12√®me ann√©e']),
        ('Chimie', ['11√®me ann√©e', '12√®me ann√©e']),
        ('Fran√ßais', ['11√®me ann√©e', '12√®me ann√©e']),
        ('Anglais', ['10√®me ann√©e', '11√®me ann√©e', '12√®me ann√©e']),
        ('Biologie', ['11√®me ann√©e', '12√®me ann√©e']),
        ('Philosophie', ['11√®me ann√©e', '12√®me ann√©e']),
        ('Histoire', ['11√®me ann√©e', '12√®me ann√©e']),
        ('G√©ographie', ['11√®me ann√©e', '12√®me ann√©e']),
    ]
    
    # Associer cours et niveaux
    for titre_cours, niveaux_liste in cours_niveaux_mapping:
        cours = cours_objects[titre_cours]
        for niveau_nom in niveaux_liste:
            if niveau_nom in niveaux:
                cours.niveaux.add(niveaux[niveau_nom])
                print(f"‚úÖ {titre_cours} associ√© au niveau {niveau_nom}")
    
    # 4. CR√âER LES OFFRES TARIFAIRES
    offres_data = [
        # PRIMAIRE - Forfait global
        {
            'nom': 'Forfait Primaire Complet',
            'description': 'Toutes les mati√®res du primaire incluses',
            'type_offre': 'forfait_global',
            'prix_unitaire': 500000,  # 500k GNF
            'niveaux': ['1√®re ann√©e', '2√®me ann√©e', '3√®me ann√©e', '4√®me ann√©e', '5√®me ann√©e', '6√®me ann√©e'],
            'matieres': ['Dict√©e', 'R√©daction', 'Calcul Ecrit', 'SVT', 'Histoire', 'G√©ographie', 'Education Civique et Morale'],
            'nombre_seances_mois': 12,
            'duree_seance_max': 120,  # 2h
            'jours_par_semaine': 4,
        },
        
        # COLL√àGE - Par mati√®re
        {
            'nom': 'Coll√®ge - Par Mati√®re',
            'description': 'Tarif unitaire par mati√®re pour le coll√®ge',
            'type_offre': 'par_matiere',
            'prix_unitaire': 200000,  # 200k GNF par mati√®re
            'niveaux': ['7√®me ann√©e', '8√®me ann√©e', '9√®me ann√©e'],
            'matieres': ['Fran√ßais', 'Anglais', 'Math√©matiques', 'Physique', 'Chimie', 'Histoire', 'G√©ographie', 'Biologie'],
            'nombre_seances_mois': 12,
            'duree_seance_max': 180,  # 3h
            'jours_par_semaine': 3,
        },
        
        # 10√®me - Pack Examen (Maths + Physique + Chimie)
        {
            'nom': 'Pack Examen 10√®me',
            'description': 'Pack sp√©cial Maths + Physique + Chimie pour la 10√®me + autre mati√®re',
            'type_offre': 'pack_examen',
            'prix_unitaire': 100000,  # Prix unitaire
            'prix_combine': 350000,   # Prix combin√© pour les 3 mati√®res
            'niveaux': ['10√®me ann√©e'],
            'matieres': ['Math√©matiques', 'Physique', 'Chimie'],
            'nombre_seances_mois': 12,
            'duree_seance_max': 180,
            'jours_par_semaine': 3,
        },
        
        # LYC√âE 11-12√®me - Par mati√®re
        {
            'nom': 'Lyc√©e Sup√©rieur - Par Mati√®re',
            'description': 'Tarif par mati√®re pour 11√®me et 12√®me',
            'type_offre': 'par_matiere',
            'prix_unitaire': 200000,  # 200k GNF par mati√®re
            'niveaux': ['11√®me ann√©e', '12√®me ann√©e'],
            'matieres': ['Math√©matiques', 'Physique', 'Chimie', 'Biologie', 'Fran√ßais', 'Philosophie', 'Histoire', 'G√©ographie', 'Anglais', 'Economie'],
            'nombre_seances_mois': 12,
            'duree_seance_max': 180,
            'jours_par_semaine': 3,
        },
        
        # LYC√âE 11-12√®me - Pack Sp√©cialit√© Sciences
        {
            'nom': 'Pack Sp√©cialit√© Sciences',
            'description': 'Pack Maths + Physique + Chimie + Biologie',
            'type_offre': 'pack_specialite',
            'prix_unitaire': 400000,  # Prix fixe pour le pack
            'niveaux': ['11√®me ann√©e', '12√®me ann√©e'],
            'matieres': ['Math√©matiques', 'Physique', 'Chimie', 'Biologie', 'Fran√ßais'],
            'nombre_seances_mois': 12,
            'duree_seance_max': 180,  # 3h
            'jours_par_semaine': 3,
        }
    ]
    
    for i, offre_data in enumerate(offres_data):
        offre, created = OffreTarifaire.objects.get_or_create(
            nom=offre_data['nom'],
            defaults={
                'description': offre_data['description'],
                'type_offre': offre_data['type_offre'],
                'prix_unitaire': offre_data['prix_unitaire'],
                'prix_combine': offre_data.get('prix_combine'),
                'nombre_seances_mois': offre_data['nombre_seances_mois'],
                'duree_seance_max': offre_data['duree_seance_max'],
                'jours_par_semaine': offre_data['jours_par_semaine'],
                'ordre': i,
                'is_active': True,
            }
        )
        
        # Associer aux niveaux
        for niveau_nom in offre_data['niveaux']:
            if niveau_nom in niveaux:
                offre.niveaux.add(niveaux[niveau_nom])
        
        # Associer aux mati√®res
        for matiere_nom in offre_data['matieres']:
            if matiere_nom in cours_objects:
                offre.matieres_incluses.add(cours_objects[matiere_nom])
        
        if created:
            print(f"‚úÖ Offre cr√©√©e: {offre.nom} - {offre.prix_unitaire:,} GNF")
    
    print("\nüéâ Donn√©es de test cr√©√©es avec succ√®s!")
    print(f"üìä R√©sum√©:")
    print(f"   - {Niveau.objects.count()} niveaux")
    print(f"   - {Cours.objects.count()} cours")
    print(f"   - {OffreTarifaire.objects.count()} offres tarifaires")
    
    # Affichage des associations pour v√©rification
    print("\nüîç V√©rification des associations cours-niveaux:")
    for cours in Cours.objects.all():
        niveaux_associes = cours.niveaux.values_list('nom', flat=True)
        print(f"   - {cours.titre}: {', '.join(niveaux_associes)}")


# Si c'est une commande de management
class Command(BaseCommand):
    help = 'Cr√©e des donn√©es de test pour le syst√®me de souscription'
    
    def handle(self, *args, **options):
        create_test_data()

# Si vous l'ex√©cutez directement dans le shell :
# python manage.py shell
# >>> exec(open('create_test_data.py').read())